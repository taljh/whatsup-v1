import { createClient } from "@supabase/supabase-js"
import { SallaAPI, sallaConnections } from "./salla"

// ÿ•ŸÜÿ¥ÿßÿ° ÿπŸÖŸäŸÑ Supabase ŸÑŸÑÿÆÿßÿØŸÖ
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
})

// ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ ŸÖŸÜ ÿ®ŸäÿßŸÜÿßÿ™ ÿ≥ŸÑÿ©
function extractCustomerInfo(order: any) {
  const customer = order.customer || {}
  const shipping = order.shipping || {}
  const shippingAddress = shipping.address || {}

  return {
    name: customer.first_name ? `${customer.first_name} ${customer.last_name || ""}` : shippingAddress.name || "ÿπŸÖŸäŸÑ",
    email: customer.email || null,
    phone: customer.mobile || shippingAddress.phone || null,
  }
}

// ÿ™ÿ≠ŸàŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÑÿ® ÿ•ŸÑŸâ ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿ≥ŸÑÿ© ÿßŸÑŸÖÿ™ÿ±ŸàŸÉÿ©
function mapOrderToAbandonedCart(order: any, userId: string) {
  const customer = extractCustomerInfo(order)
  const items = order.items || []

  return {
    user_id: userId,
    salla_cart_id: order.id.toString(),
    customer_name: customer.name,
    customer_phone: customer.phone,
    customer_email: customer.email,
    cart_url: order.url || `https://${order.store_subdomain}.mysalla.com/cart`,
    total_amount: order.amounts?.total?.amount || 0,
    currency: order.currency || "SAR",
    items: items,
    status: "pending",
    first_reminder_sent: false,
    second_reminder_sent: false,
  }
}

// ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ŸàŸÉÿ© ŸÖŸÜ ÿ≥ŸÑÿ©
export async function fetchAbandonedCartsFromSalla(userId: string) {
  try {
    console.log(`üîÑ Fetching abandoned carts for user ${userId}`)

    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßÿ™ÿµÿßŸÑ ÿ≥ŸÑÿ© ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    const connection = await sallaConnections.getByUserId(userId)
    if (!connection) {
      console.error(`‚ùå No active Salla connection found for user ${userId}`)
      return { success: false, message: "No active Salla connection found" }
    }

    // ÿ•ŸÜÿ¥ÿßÿ° ÿπŸÖŸäŸÑ API ÿ≥ŸÑÿ©
    const sallaApi = new SallaAPI(connection.access_token)

    // ÿ¨ŸÑÿ® ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÖÿπŸÑŸÇÿ© (ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ŸàŸÉÿ©)
    const response = await sallaApi.getAbandonedCarts()
    const orders = response.data || []

    console.log(`üì¶ Found ${orders.length} abandoned carts`)

    // ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ•ŸÑŸâ ÿ≥ŸÑÿßÿ™ ŸÖÿ™ÿ±ŸàŸÉÿ©
    const abandonedCarts = orders.map((order: any) => mapOrderToAbandonedCart(order, userId))

    // ÿ≠ŸÅÿ∏ ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ŸàŸÉÿ© ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    const results = await Promise.all(
      abandonedCarts.map(async (cart) => {
        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿßŸÑÿ≥ŸÑÿ© ŸÖÿ≥ÿ®ŸÇÿßŸã
        const { data: existingCart } = await supabase
          .from("abandoned_carts")
          .select("id")
          .eq("salla_cart_id", cart.salla_cart_id)
          .eq("user_id", userId)
          .single()

        if (existingCart) {
          console.log(`‚è≠Ô∏è Cart ${cart.salla_cart_id} already exists, skipping`)
          return { skipped: true, cartId: existingCart.id }
        }

        // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥ŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
        const { data, error } = await supabase
          .from("abandoned_carts")
          .insert({
            ...cart,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          })
          .select()
          .single()

        if (error) {
          console.error(`‚ùå Error saving cart ${cart.salla_cart_id}:`, error)
          return { error: true, message: error.message }
        }

        console.log(`‚úÖ Saved cart ${cart.salla_cart_id} with ID ${data.id}`)
        return { success: true, cartId: data.id }
      }),
    )

    // ÿ™ÿ≠ÿØŸäÿ´ ŸàŸÇÿ™ ÿ¢ÿÆÿ± ŸÖÿ≤ÿßŸÖŸÜÿ©
    await supabase
      .from("salla_connections")
      .update({
        last_sync_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq("id", connection.id)

    return {
      success: true,
      totalCarts: orders.length,
      savedCarts: results.filter((r) => r.success).length,
      skippedCarts: results.filter((r) => r.skipped).length,
      failedCarts: results.filter((r) => r.error).length,
    }
  } catch (error) {
    console.error("‚ùå Error fetching abandoned carts:", error)
    return {
      success: false,
      message: error instanceof Error ? error.message : "Unknown error",
    }
  }
}

// ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßÿ¶ŸÑ ÿ™ÿ∞ŸÉŸäÿ± ŸÑŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ŸàŸÉÿ©
export async function sendRemindersForAbandonedCarts(userId: string) {
  try {
    console.log(`üîî Checking for carts that need reminders for user ${userId}`)

    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    const { data: settings } = await supabase.from("settings").select("*").eq("user_id", userId).single()

    if (!settings || !settings.is_active) {
      console.log(`‚è≠Ô∏è Reminders are disabled for user ${userId}`)
      return { success: true, message: "Reminders are disabled" }
    }

    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÇŸàÿßŸÑÿ® ÿßŸÑŸÜÿ¥ÿ∑ÿ©
    const { data: templates } = await supabase
      .from("templates")
      .select("*")
      .eq("user_id", userId)
      .eq("is_active", true)
      .in("type", ["first", "second"])

    if (!templates || templates.length === 0) {
      console.error(`‚ùå No active templates found for user ${userId}`)
      return { success: false, message: "No active templates found" }
    }

    const firstReminderTemplate = templates.find((t) => t.type === "first")
    const secondReminderTemplate = templates.find((t) => t.type === "second")

    if (!firstReminderTemplate) {
      console.error(`‚ùå No first reminder template found for user ${userId}`)
      return { success: false, message: "No first reminder template found" }
    }

    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ŸàŸÉÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ÿßÿ¨ ÿ•ŸÑŸâ ÿ™ÿ∞ŸÉŸäÿ±
    const now = new Date()
    const firstReminderDelay = settings.delay_minutes_first || 60 // 60 ÿØŸÇŸäŸÇÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂ŸäÿßŸã
    const secondReminderDelay = settings.delay_minutes_second || 1440 // 24 ÿ≥ÿßÿπÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂ŸäÿßŸã

    // ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ÿßÿ¨ ÿ•ŸÑŸâ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ£ŸàŸÑ
    const firstReminderTime = new Date(now.getTime() - firstReminderDelay * 60 * 1000)
    const { data: firstReminderCarts } = await supabase
      .from("abandoned_carts")
      .select("*")
      .eq("user_id", userId)
      .eq("status", "pending")
      .eq("first_reminder_sent", false)
      .lt("created_at", firstReminderTime.toISOString())

    console.log(`üì¨ Found ${firstReminderCarts?.length || 0} carts for first reminder`)

    // ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ÿßÿ¨ ÿ•ŸÑŸâ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ´ÿßŸÜŸä
    let secondReminderCarts: any[] = []
    if (settings.second_reminder_enabled && secondReminderTemplate) {
      const secondReminderTime = new Date(now.getTime() - secondReminderDelay * 60 * 1000)
      const { data: carts } = await supabase
        .from("abandoned_carts")
        .select("*")
        .eq("user_id", userId)
        .eq("status", "pending")
        .eq("first_reminder_sent", true)
        .eq("second_reminder_sent", false)
        .lt("first_reminder_sent_at", secondReminderTime.toISOString())

      secondReminderCarts = carts || []
      console.log(`üì¨ Found ${secondReminderCarts.length} carts for second reminder`)
    }

    // ŸáŸÜÿß ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ (ŸÅŸä ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ≠ŸÇŸäŸÇŸä)
    // ŸÑÿ£ÿ∫ÿ±ÿßÿ∂ Ÿáÿ∞ÿß ÿßŸÑŸÖÿ´ÿßŸÑÿå ÿ≥ŸÜŸÇŸàŸÖ ŸÅŸÇÿ∑ ÿ®ÿ™ÿ≠ÿØŸäÿ´ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≥ŸÑÿßÿ™

    // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ£ŸàŸÑ ŸÑŸáÿß
    if (firstReminderCarts && firstReminderCarts.length > 0) {
      await Promise.all(
        firstReminderCarts.map(async (cart) => {
          await supabase
            .from("abandoned_carts")
            .update({
              first_reminder_sent: true,
              first_reminder_sent_at: now.toISOString(),
              updated_at: now.toISOString(),
            })
            .eq("id", cart.id)

          console.log(`‚úÖ Marked first reminder as sent for cart ${cart.id}`)
        }),
      )
    }

    // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≥ŸÑÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ÿßŸÑÿ´ÿßŸÜŸä ŸÑŸáÿß
    if (secondReminderCarts.length > 0) {
      await Promise.all(
        secondReminderCarts.map(async (cart) => {
          await supabase
            .from("abandoned_carts")
            .update({
              second_reminder_sent: true,
              second_reminder_sent_at: now.toISOString(),
              updated_at: now.toISOString(),
            })
            .eq("id", cart.id)

          console.log(`‚úÖ Marked second reminder as sent for cart ${cart.id}`)
        }),
      )
    }

    return {
      success: true,
      firstRemindersSent: firstReminderCarts?.length || 0,
      secondRemindersSent: secondReminderCarts.length,
    }
  } catch (error) {
    console.error("‚ùå Error sending reminders:", error)
    return {
      success: false,
      message: error instanceof Error ? error.message : "Unknown error",
    }
  }
}
